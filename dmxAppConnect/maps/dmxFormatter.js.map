{"version":3,"sources":["formatters/global.js","formatters/array.js","formatters/number.js","formatters/string.js","formatters/object.js","formatters/boolean.js","formatters/undefined.js","formatters/null.js"],"names":["dmx","Formatters","default","value","defaultValue","string","String","number","Number","date","toLowerCase","Date","toString","toISOString","hasItems","array","length","contains","indexOf","join","separator","count","top","slice","last","begin","end","reverse","randomize","t","r","rnd","randomizer","this","seed","hashCode","i","Math","floor","filter","expression","item","parse","DataScope","map","where","prop","operator","val","substr","search","stringLen","searchLen","outer","j","char","charCodeAt","values","groupBy","reduce","obj","key","push","unique","Object","keys","JSON","stringify","sort","a","b","min","Infinity","max","sum","avg","inRange","abs","ceil","pow","exponent","round","precision","factor","temp","rounded","pad","neg","str","toFixed","decimals","formatNumber","delimiter","isNaN","isFinite","x","split","x1","x2","re","test","replace","formatCurrency","unit","formatSize","binary","base","suffix","n","toDate","parseDate","d","struct","offset","exec","k","undefined","UTC","setHours","setMinutes","setSeconds","resetTime","setMilliseconds","startsWith","endsWith","pos","index","lastIndexOf","matchAll","word","fuzzySearch","regexp","lowercase","uppercase","toUpperCase","slugify","camelize","trim","c","capitalize","dasherize","humanize","underscore","titlecase","camelcase","start","substring","RegExp","escapeRegExp","trimLeft","trimRight","concat","string2","trunc","charsAllowed","useWordBoundary","append","stripTags","padStart","filler","rem","padEnd","repeat","out","wordCount","toNumber","addYears","years","setFullYear","getFullYear","addMonths","months","setMonth","getMonth","addWeeks","weeks","setDate","getDate","addDays","days","addHours","hours","getHours","addMinutes","minutes","getMinutes","addSeconds","seconds","getSeconds","yearsUntil","date1","date2","monthsUntil","weeksUntil","daysUntil","hoursUntil","minutesUntil","secondsUntil","timeUntil","includeHours","toISODate","pad2","pad4","toISOTime","formatDate","format","monthsShort","daysShort","year","month","day","weekday","getDay","part","toTimestamp","getTime","object","hasKey","hasValue","bool","then","trueValue","falseValue","o"],"mappings":"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","file":"../dmxFormatter/dmxFormatter.js","sourcesContent":["dmx.Formatters('global', {\r\n\r\n    // default(value:Any, defaultValue:Any):Any\r\n    default: function(value, defaultValue) {\r\n        return value == null ? defaultValue : value;\r\n    },\r\n\r\n    // string(value:Any):String\r\n    string: function(value) {\r\n        return String(value);\r\n    },\r\n\r\n    // number(value:Any):String\r\n    number: function(value) {\r\n        return Number(value);\r\n    },\r\n\r\n    // date(value:Any):String\r\n    date: function(value) {\r\n        if (typeof value == 'number') {\r\n            value *= 1000;\r\n        }\r\n\r\n        if (typeof value == 'string' && value.toLowerCase() == 'now') {\r\n            value = null;\r\n        }\r\n\r\n        var date = value ? new Date(value) : new Date();\r\n\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n\r\n        return date.toISOString();\r\n    }\r\n\r\n});\r\n","dmx.Formatters('array', {\r\n\r\n    // hasItems():Boolean\r\n    hasItems: function(array) {\r\n        return !!array.length;\r\n    },\r\n\r\n    // contains(value:Any):Boolean\r\n    contains: function(array, value) {\r\n        return array.indexOf(value) > -1;\r\n    },\r\n\r\n    // join(separator:String):String\r\n    join: function(array, separator) {\r\n        return array.join(separator);\r\n    },\r\n\r\n    // count():Number\r\n    count: function(array) {\r\n        return array.length;\r\n    },\r\n\r\n    // top(count:Number):Array\r\n    top: function(array, count) {\r\n        return array.slice(0, count);\r\n    },\r\n\r\n    // last(count:Number):Array\r\n    last: function(array, count) {\r\n        return array.slice(-count);\r\n    },\r\n\r\n    // slice([begin:Number], [end:Number])\r\n    slice: function(array, begin, end) {\r\n        return array.slice(begin, end);\r\n    },\r\n\r\n    // reverse():Array\r\n    reverse: function(array) {\r\n        return array.slice(0).reverse();\r\n    },\r\n\r\n    // randomize():Array\r\n    randomize: function(array) {\r\n        var rnd = dmx.randomizer(this.seed * dmx.hashCode(array));\r\n        var i = array.length, t, r;\r\n\r\n        array = array.slice(0);\r\n\r\n        while (0 !== i) {\r\n            r = Math.floor(rnd() * i--);\r\n            t = array[i];\r\n            array[i] = array[r];\r\n            array[r] = t;\r\n        }\r\n\r\n        return array;\r\n    },\r\n\r\n    // Collection formatters (requires array with objects in them)\r\n\r\n    // filter(expression:Expression):Array\r\n    filter: function(array, expression) {\r\n        return array.filter(function(item) {\r\n            return dmx.parse(expression, new dmx.DataScope(item, this));\r\n        }, this);\r\n    },\r\n\r\n    // map(expression:Expression):Array\r\n    map: function(array, expression) {\r\n        return array.map(function(item) {\r\n            return dmx.parse(expression, new dmx.DataScope(item, this));\r\n        }, this);\r\n    },\r\n\r\n    // where(prop:String, value:String, [operator:String]):Array\r\n    where: function(array, prop, value, operator) {\r\n        operator = operator || '==';\r\n\r\n        return array.filter(function(item) {\r\n            var val = dmx.parse(prop, new dmx.DataScope(item, this));\r\n\r\n            switch (operator) {\r\n                case 'startsWith': return String(val).indexOf(value) === 0;\r\n                case 'endsWith': return String(val).substr(-value.length) === value;\r\n                case 'contains': return String(val).indexOf(value) !== -1;\r\n                case 'inArray': return value.indexOf(val) !== -1;\r\n                case 'fuzzySearch': return (function(string, search) {\r\n                    var stringLen = string.length;\r\n                    var searchLen = search.length;\r\n                    if (searchLen > stringLen) {\r\n                        return false;\r\n                    }\r\n                    if (searchLen === stringLen) {\r\n                        return string === search;\r\n                    }\r\n                    outer: for (var i = 0, j = 0; i < searchLen; i++) {\r\n                        var char = search.charCodeAt(i);\r\n                        while (j < stringLen) {\r\n                            if (string.charCodeAt(j++) === char) {\r\n                                continue outer;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                })(String(val), value);\r\n                case '==': return val == value;\r\n                case '===': return val === value;\r\n                case '!=': return val != value;\r\n                case '!==': return val !== value;\r\n                case '<': return val < value;\r\n                case '<=': return val <= value;\r\n                case '>': return val > value;\r\n                case '>=': return val >= value;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    },\r\n\r\n    // values(prop:String):Array\r\n    values: function(array, prop) {\r\n        return array.map(function(item) {\r\n            return dmx.parse(prop, new dmx.DataScope(item, this));\r\n        });\r\n    },\r\n\r\n    // groupBy(prop:String):Object\r\n    groupBy: function(array, prop) {\r\n        return array.reduce(function(obj, item) {\r\n            var key = dmx.parse(prop, new dmx.DataScope(item, this));\r\n            if (!obj[key]) obj[key] = [];\r\n            obj[key].push(item);\r\n            return obj;\r\n        }, {});\r\n    },\r\n\r\n    // unique([prop:String]):Array\r\n    unique: function(array, prop) {\r\n        if (prop) {\r\n            array = array.map(function(item) {\r\n                return dmx.parse(prop, new dmx.DataScope(item, this));\r\n            });\r\n        }\r\n\r\n        return Object.keys(array.reduce(function(obj, value) {\r\n            obj[JSON.stringify(value)] = 1;\r\n            return obj;\r\n        }, {})).map(function(key) {\r\n            return JSON.parse(key);\r\n        });\r\n    },\r\n\r\n    // sortOn([prop:String]):Array\r\n    sort: function(array, prop) {\r\n        return array.slice(0).sort(function(a, b) {\r\n            if (prop) {\r\n                a = dmx.parse(prop, new dmx.DataScope(a, this));\r\n                b = dmx.parse(prop, new dmx.DataScope(b, this));\r\n            }\r\n            return a < b ? -1 : a > b ? 1 : 0;\r\n        });\r\n    },\r\n\r\n    // min([prop:String]):Number\r\n    min: function(array, prop) {\r\n        return array.reduce(function(min, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return value < min ? value : min;\r\n        }, Infinity);\r\n    },\r\n\r\n    // max([prop:String]):Number\r\n    max: function(array, prop) {\r\n        return array.reduce(function(max, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return value > max ? value : max;\r\n        }, -Infinity);\r\n    },\r\n\r\n    // sum([prop:String]):Number\r\n    sum: function(array, prop) {\r\n        return array.reduce(function(sum, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return sum + value;\r\n        }, 0);\r\n    },\r\n\r\n    // avg([prop:String]):Number\r\n    avg: function(array, prop) {\r\n        return array.reduce(function(sum, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return sum + value;\r\n        }, 0) / array.length;\r\n    },\r\n\r\n    // default():Array\r\n    default: function(array) {\r\n        return array;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('number', {\r\n\r\n    // inRange(min:Number, max:Number):Boolean\r\n    inRange: function(number, min, max) {\r\n        return number >= min && number <= max;\r\n    },\r\n\r\n    // abs():Number\r\n    abs: function(number) {\r\n        return Math.abs(number);\r\n    },\r\n\r\n    // ceil():Number\r\n    ceil: function(number) {\r\n        return Math.ceil(number);\r\n    },\r\n\r\n    // floor():Number\r\n    floor: function(number) {\r\n        return Math.floor(number);\r\n    },\r\n\r\n    // max(max:Number):Number\r\n    max: function(number, max) {\r\n        return Math.max(number, max);\r\n    },\r\n\r\n    // min(min:Number):Number\r\n    min: function(number, min) {\r\n        return Math.min(number, min);\r\n    },\r\n\r\n    // pow(exponent:Number):Number\r\n    pow: function(number, exponent) {\r\n        return Math.pow(number, exponent);\r\n    },\r\n\r\n    // round([precision:Number]):Number\r\n    round: function(number, precision) {\r\n        var factor = Math.pow(10, precision || 0);\r\n        var temp = number * factor;\r\n        var rounded = Math.round(temp);\r\n        return rounded / factor;\r\n    },\r\n\r\n    // pad(length:Number):String\r\n    pad: function(number, length) {\r\n        var neg = number < 0 ? '-' : '';\r\n        var str = String(Math.abs(number));\r\n        while (str.length < length) {\r\n            str = '0' + str;\r\n        }\r\n        return neg + str;\r\n    },\r\n\r\n    // toFixed([decimals:Number]):String\r\n    toFixed: function(number, decimals) {\r\n        return number.toFixed(decimals);\r\n    },\r\n\r\n    // formatNumber([decimals:Number], [separator:String], [delimiter:String]):String\r\n    formatNumber: function(number, decimals, separator, delimiter) {\r\n        if (isNaN(number)) return 'Invalid Number';\r\n        if (!isFinite(number)) return (number < 0 ? '-' : '') + 'infinite';\r\n\r\n        separator = separator || '.';\r\n        delimiter = delimiter || '';\r\n\r\n        var neg = number < 0;\r\n        number = Math.abs(number);\r\n        var x = (decimals != null && decimals >= 0 ? number.toFixed(decimals) : number.toString()).split('.');\r\n        var x1 = x[0];\r\n        var x2 = x.length > 1 ? separator + x[1] : '';\r\n\r\n        if (delimiter) {\r\n            var re = /(\\d+)(\\d{3})/;\r\n            while (re.test(x1)) {\r\n                x1 = x1.replace(re, '$1' + delimiter + '$2');\r\n            }\r\n        }\r\n\r\n        return (neg ? '-' : '') + x1 + x2;\r\n    },\r\n\r\n    // formatCurrency([unit:String], [separator:String], [delimiter:String], [precision:Number]):String\r\n    formatCurrency: function(number, unit, separator, delimiter, precision) {\r\n        if (isNaN(number) || !isFinite(number)) return 'Invalid Amount';\r\n\r\n        unit = unit || '$';\r\n        separator = separator || '.';\r\n        delimiter = delimiter || ',';\r\n        precision = precision || 2;\r\n\r\n        var neg = number < 0;\r\n        var x = Math.abs(number).toFixed(precision).split('.');\r\n        var x1 = x[0];\r\n        var x2 = x.length > 1 ? separator + x[1] : '';\r\n\r\n        if (delimiter) {\r\n            var re = /(\\d+)(\\d{3})/;\r\n            while (re.test(x1)) {\r\n                x1 = x1.replace(re, '$1' + delimiter + '$2');\r\n            }\r\n        }\r\n\r\n        return (neg ? '-' : '') + unit + x1 + x2;\r\n    },\r\n\r\n    // formatSize([decimals:Number], [binary:Boolean]):String\r\n    formatSize: function(number, decimals, binary) {\r\n        if (isNaN(number) || !isFinite(number)) return 'Invalid Size';\r\n\r\n        decimals = decimals || 2;\r\n\r\n        var base = binary ? 1024 : 1000;\r\n        var suffix = binary ? ['KiB', 'MiB', 'GiB', 'TiB'] : ['KB', 'MB', 'GB', 'TB'];\r\n\r\n        for (var i = 3; i >= 0; i--) {\r\n            var n = Math.pow(base, i + 1);\r\n            if (number >= n) {\r\n                number /= n;\r\n                var pow = Math.pow(10, decimals);\r\n                number = Math.round(number * pow) / pow;\r\n                return number + suffix[i];\r\n            }\r\n        }\r\n\r\n        return number + 'B';\r\n    },\r\n\r\n    // default():Number\r\n    default: function(number) {\r\n        return number;\r\n    },\r\n\r\n    // toString():String\r\n    toString: function(number) {\r\n        return String(number);\r\n    },\r\n\r\n    // toDate():String\r\n    toDate: function(number) {\r\n        return (new Date(number * 1000)).toISOString();\r\n    }\r\n\r\n    // TODO: use localization, Intl from browser? (polyfill => https://github.com/andyearnshaw/Intl.js/)\r\n    // format, toString, currency, toLocale, bytes\r\n\r\n});\r\n","(function() {\r\n\r\ndmx.Formatters('string', {\r\n\r\n    // startWith(search:String):Boolean\r\n    startsWith: function(string, search) {\r\n        return string.indexOf(search) === 0;\r\n    },\r\n\r\n    // endsWith(search:String):Boolean\r\n    endsWith: function(string, search) {\r\n        var pos = string.length - search.length;\r\n        var index = string.lastIndexOf(search);\r\n        return index !== -1 && index === pos;\r\n    },\r\n\r\n    // contains(search:String):Boolean\r\n    contains: function(string, search) {\r\n        return string.indexOf(search) !== -1;\r\n    },\r\n\r\n    search: function(string, search, matchAll) {\r\n        return String(search).split(/\\s+/)[matchAll ? 'every' : 'some'](function(word) {\r\n            return string.indexOf(word) !== -1;\r\n        });\r\n    },\r\n\r\n    // fuzzySearch(search:String):Boolean\r\n    fuzzySearch: function(string, search) {\r\n        var stringLen = string.length;\r\n        var searchLen = search.length;\r\n        if (searchLen > stringLen) {\r\n            return false;\r\n        }\r\n        if (searchLen === stringLen) {\r\n            return string === search;\r\n        }\r\n        outer: for (var i = 0, j = 0; i < searchLen; i++) {\r\n            var char = search.charCodeAt(i);\r\n            while (j < stringLen) {\r\n                if (string.charCodeAt(j++) === char) {\r\n                    continue outer;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    // test(regexp:RegExp):Boolean\r\n    test: function(string, regexp) {\r\n        return regexp.test(string);\r\n    },\r\n\r\n    // lowercase():String\r\n    lowercase: function(string) {\r\n        return string.toLowerCase();\r\n    },\r\n\r\n    // uppercase():String\r\n    uppercase: function(string) {\r\n        return string.toUpperCase();\r\n    },\r\n\r\n    // slugify():String\r\n    slugify: function(string) {\r\n        return string.toLowerCase().replace(/[^\\w\\s]/g, '').replace(/[_\\s]+/g, '-').replace(/-+/g, '-').replace(/^-/, '');\r\n    },\r\n\r\n    // camelize():String\r\n    camelize: function(string) {\r\n        return string.trim().replace(/(\\-|_|\\s)+(.)?/g, function(a, b, c) {\r\n            return (c ? c.toUpperCase() : '');\r\n        });\r\n    },\r\n\r\n    // capitalize():String\r\n    capitalize: function(string) {\r\n        return string.substr(0, 1).toUpperCase() + string.substr(1).toLowerCase();\r\n    },\r\n\r\n    // dasherize():String\r\n    dasherize: function(string) {\r\n        return string.replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').toLowerCase();\r\n    },\r\n\r\n    // humanize():String\r\n    humanize: function(string) {\r\n        var str = string.replace(/([a-z\\d])([A-Z+])/g, '$1_$2').replace(/[-\\s]+/g, '_').replace(/_+/g, ' ').trim();\r\n        return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();\r\n    },\r\n\r\n    // underscore():String\r\n    underscore: function(string) {\r\n        return string.trim().replace(/([a-z\\d])([A-Z]+)/g, '$1_$1').replace(/[-\\s]+/g, '_').toLowerCase();\r\n    },\r\n\r\n    // titlecase():String\r\n    titlecase: function(string) {\r\n        return string.toLowerCase().replace(/(?:^|\\s)\\S/g, function(a) {\r\n            return a.toUpperCase();\r\n        });\r\n    },\r\n\r\n    // camelcase():String\r\n    camelcase: function(string) {\r\n        return string.toLowerCase().replace(/\\s+(\\S)/g, function(a, b) {\r\n            return b.toUpperCase();\r\n        });\r\n    },\r\n\r\n    // substr(start:Number, [length:Number]):String\r\n    substr: function(string, start, length) {\r\n        return string.substr(start, length);\r\n    },\r\n\r\n    // substring(start:Number, [end:Number]):String\r\n    substring: function(string, start, end) {\r\n        return string.substring(start, end);\r\n    },\r\n\r\n    // replace(search:String|RegExp, replace:String):String\r\n    replace: function(string, search, replace) {\r\n        if (typeof search == 'string') {\r\n            search = new RegExp(dmx.escapeRegExp(search), 'g');\r\n        }\r\n        return string.replace(search, replace);\r\n    },\r\n\r\n    // trim():String\r\n    trim: function(string) {\r\n        return string.trim();\r\n    },\r\n\r\n    // trimLeft():String\r\n    trimLeft: function(string) {\r\n        return string.replace(/^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]*/, '');\r\n    },\r\n\r\n    // trimRight():String\r\n    trimRight: function(string) {\r\n        return string.replace(/[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]*$/, '');\r\n    },\r\n\r\n    // concat(string2:String):String\r\n    concat: function(string, string2) {\r\n        return string.concat(string2);\r\n    },\r\n\r\n    // trunc(charsAllowed:Number, [useWordBoundary:Boolean], [append:String]):String\r\n    trunc: function(string, charsAllowed, useWordBoundary, append) {\r\n        useWordBoundary = !!useWordBoundary;\r\n        append = append || '…';\r\n\r\n        if (string.length > charsAllowed) {\r\n            string = string.substr(0, charsAllowed);\r\n\r\n            if (useWordBoundary && string.indexOf(' ') !== -1) {\r\n                string = string.substr(0, string.lastIndexOf(' '));\r\n            }\r\n\r\n            string += append;\r\n        }\r\n\r\n        return string;\r\n    },\r\n\r\n    // stripTags():String\r\n    stripTags: function(string) {\r\n        return string.replace(/<[^>]+>/g, '');\r\n    },\r\n\r\n    // padStart(length:Number, [filler:String]):String\r\n    padStart: function(string, length, filler) {\r\n        filler = filler || ' ';\r\n\r\n        if (length <= string.length) {\r\n            return string;\r\n        }\r\n\r\n        var rem = length - string.length;\r\n        while (filler.length < rem) {\r\n            filler += filler;\r\n        }\r\n\r\n        return filler.substr(0, rem) + string;\r\n    },\r\n\r\n    // padEnd(length:Number, [filler:String]):String\r\n    padEnd: function(string, length, filler) {\r\n        filler = filler || ' ';\r\n\r\n        if (length <= string.length) {\r\n            return string;\r\n        }\r\n\r\n        var rem = length - string.length;\r\n        while (filler.length < rem) {\r\n            filler += filler;\r\n        }\r\n\r\n        return string + filler.substr(0, rem);\r\n    },\r\n\r\n    // repeat(count:Number):String\r\n    repeat: function(string, count) {\r\n        var out = '';\r\n        for (var i = 0; i < count; i++) {\r\n            out += string;\r\n        }\r\n        return out;\r\n    },\r\n\r\n    // wordCount():Number\r\n    wordCount: function(string) {\r\n        return string.trim().split(/\\s+/).length;\r\n    },\r\n\r\n    // split(separator:String|RegExp):Array\r\n    split: function(string, separator) {\r\n        return string.split(separator);\r\n    },\r\n\r\n    // default()\r\n    default: function(string) {\r\n        return string;\r\n    },\r\n\r\n    // toNumber():Number\r\n    toNumber: function(string) {\r\n        return Number(string);\r\n    },\r\n\r\n    // Date formatters (requires a date string)\r\n\r\n    toDate: function(string) {\r\n        var date = parseDate(string);\r\n\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n\r\n        return date.toISOString();\r\n    },\r\n\r\n    // addYears(years:Number):String\r\n    addYears: function(string, years) {\r\n        var date = parseDate(string);\r\n        date.setFullYear(date.getFullYear() + years);\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // addMonths(months:Number):String\r\n    addMonths: function(string, months) {\r\n        var date = parseDate(string);\r\n        date.setMonth(date.getMonth() + months);\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // addWeeks(weeks:Number):String\r\n    addWeeks: function(string, weeks) {\r\n        var date = parseDate(string);\r\n        date.setDate(date.getDate() + (weeks * 7));\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // addDays(days:Number):String\r\n    addDays: function(string, days) {\r\n        var date = parseDate(string);\r\n        date.setDate(date.getDate() + days);\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // addHours(hours:Number):String\r\n    addHours: function(string, hours) {\r\n        var date = parseDate(string);\r\n        date.setHours(date.getHours() + hours);\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // addMinutes(minutes:Number):String\r\n    addMinutes: function(string, minutes) {\r\n        var date = parseDate(string);\r\n        date.setMinutes(date.getMinutes() + minutes);\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // addSeconds(seconds:Number):String\r\n    addSeconds: function(string, seconds) {\r\n        var date = parseDate(string);\r\n        date.setSeconds(date.getSeconds() + seconds);\r\n        return date.toString() == 'Invalid' ? null : date.toISOString();\r\n    },\r\n\r\n    // yearsUntil(date:String):Number\r\n    yearsUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        return date2.getFullYear() - date1.getFullYear();\r\n    },\r\n\r\n    // monthsUntil(date:String):Number\r\n    monthsUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        return (date2.getFullYear() * 12 + date2.getMonth()) - (date1.getFullYear() * 12 + date1.getMonth());\r\n    },\r\n\r\n    // weeksUntil(date:String):Number\r\n    weeksUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        return Math.floor((date2 - date1) / 604800000); // 7 * 24 * 60 * 60 * 1000\r\n    },\r\n\r\n    // daysUntil(date:String):Number\r\n    daysUntil: function(string, date) {\r\n        var date1 = resetTime(parseDate(string));\r\n        var date2 = resetTime(parseDate(date));\r\n        return Math.round((date2 - date1) / 86400000); // 24 * 60 * 60 * 1000\r\n    },\r\n\r\n    // hoursUntil(date:String):Number\r\n    hoursUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        return Math.floor((date2 - date1) / 3600000); // 60 * 60 * 1000\r\n    },\r\n\r\n    // minutesUntil(date:String):Number\r\n    minutesUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        return Math.floor((date2 - date1) / 60000); // 60 * 1000\r\n    },\r\n\r\n    // secondsUntil(date:String):Number\r\n    secondsUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        return Math.floor((date2 - date1) / 1000);\r\n    },\r\n\r\n    // timeUntil(date:String, [includeHours:Boolean]):String\r\n    timeUntil: function(string, date, includeHours) {\r\n        var pad = function(n) { return (n < 10 ? '0' : '') + n; };\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        var seconds = Math.floor((date2 - date1) / 1000);\r\n        var minutes = Math.floor(seconds / 60);\r\n        var hours = Math.floor(minutes / 60);\r\n        seconds -= minutes * 60;\r\n        if (includeHours) {\r\n            minutes -= hours * 60;\r\n            return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds);\r\n        }\r\n        return pad(minutes) + ':' + pad(seconds);\r\n    },\r\n\r\n    toISODate: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n        var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n        var pad4 = function(n) { return ('0000' + n).substr(-4); };\r\n        return pad4(date.getFullYear()) + '-' + pad2(date.getMonth()) + '-' + pad2(date.getDate());\r\n    },\r\n\r\n    toISOTime: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n        var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n        return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\r\n    },\r\n\r\n    // formatDate(format:String):String\r\n    formatDate: function(string, format) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n        var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n        var pad4 = function(n) { return ('0000' + n).substr(-4); };\r\n        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        var monthsShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var daysShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        var year = date.getFullYear();\r\n    \tvar month = date.getMonth();\r\n    \tvar day = date.getDate();\r\n    \tvar weekday = date.getDay();\r\n    \tvar hours = date.getHours();\r\n    \tvar minutes = date.getMinutes();\r\n    \tvar seconds = date.getSeconds();\r\n        return format.replace(/[yMdHhmsaA]+/g, function(part) {\r\n            switch (part) {\r\n                case 'yyyy': return pad4(year);\r\n                case 'yy': return pad2(year);\r\n                case 'y': return year;\r\n                case 'MMMM': return months[month];\r\n                case 'MMM': return monthsShort[month];\r\n                case 'MM': return pad2(month + 1);\r\n                case 'M': return month + 1;\r\n                case 'dddd': return days[weekday];\r\n                case 'ddd': return daysShort[weekday];\r\n                case 'dd': return pad2(day);\r\n                case 'd': return day;\r\n                case 'HH': return pad2(hours);\r\n                case 'H': return hours;\r\n                case 'hh': return pad2((hours % 12) || 12);\r\n                case 'h': return (hours % 12) || 12;\r\n                case 'mm': return pad2(minutes);\r\n                case 'm': return minutes;\r\n                case 'ss': return pad2(seconds);\r\n                case 's': return seconds;\r\n                case 'a': return hours < 12 ? 'am' : 'pm';\r\n                case 'A': return hours < 12 ? 'AM' : 'PM';\r\n            }\r\n\r\n            return part;\r\n        });\r\n    },\r\n\r\n    // toTimestamp():Number\r\n    toTimestamp: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n        return Math.floor(date.getTime() / 1000);\r\n    }\r\n\r\n});\r\n\r\nfunction parseDate(string) {\r\n    var d, struct, offset = 0, n = [1,4,5,6,7,10,11];\r\n\r\n    if (string.toLowerCase() == 'now') {\r\n        return new Date();\r\n    }\r\n\r\n    if ((struct = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:[T ](\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/.exec(string))) {\r\n        for (var i = 0, k; (k = n[i]); ++i) {\r\n            struct[k] = +struct[k] || 0;\r\n        }\r\n\r\n        struct[2] = (+struct[2] || 1) - 1;\r\n        struct[3] = +struct[3] || 1;\r\n\r\n        if (struct[8] === undefined) {\r\n            return new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);\r\n        } else {\r\n            if (struct[8] !== 'Z' && struct[9] !== undefined) {\r\n                offset = struct[10] * 60 + struct[11];\r\n                if (struct[9] === '+') offset = 0 - offset;\r\n            }\r\n\r\n            return new Date(Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + offset, struct[6], struct[7]));\r\n        }\r\n    } else if ((struct = /^(\\d{2}):(\\d{2})(?::(\\d{2}))?$/.exec(string))) {\r\n        var d = new Date();\r\n        d.setHours(+struct[1] || 0);\r\n        d.setMinutes(+struct[2] || 0);\r\n        d.setSeconds(+struct[3] || 0);\r\n        return d;\r\n    }\r\n\r\n    return new Date(string);\r\n}\r\n\r\nfunction resetTime(date) {\r\n    date.setHours(0);\r\n    date.setMinutes(0);\r\n    date.setSeconds(0);\r\n    date.setMilliseconds(0);\r\n    return date;\r\n}\r\n\r\n})();\r\n","dmx.Formatters('object', {\r\n\r\n    // keys():Array\r\n    keys: function(object) {\r\n        return Object.keys(object);\r\n    },\r\n\r\n    // values():Array\r\n    values: function(object) {\r\n        return Object.keys(object).map(function(key) {\r\n            return object[key];\r\n        });\r\n    },\r\n\r\n    // hasKey(key:String):Boolean\r\n    hasKey: function(object, key) {\r\n        return Object.keys(object).indexOf(key) !== -1;\r\n    },\r\n\r\n    // hasValue(value:Any):Boolean\r\n    hasValue: function(object, value) {\r\n        return Object.keys(object).map(function(key) {\r\n            return object[key];\r\n        }).indexOf(value) !== -1;\r\n    },\r\n\r\n    // default():Object\r\n    default: function(object) {\r\n        return object;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('boolean', {\r\n\r\n    // default():Boolean\r\n    default: function(bool) {\r\n        return bool;\r\n    },\r\n\r\n    // toString():String\r\n    toString: function(bool) {\r\n        return String(bool);\r\n    },\r\n\r\n    // toNumber():String\r\n    toNumber: function(bool) {\r\n        return Number(bool);\r\n    },\r\n\r\n    // then(trueValue:Any, falseValue:Any):Any\r\n    then: function(bool, trueValue, falseValue) {\r\n        return bool ? trueValue : falseValue;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('undefined', {\r\n\r\n    // default(value):Any\r\n    default: function(o, value) {\r\n        return value;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('null', {\r\n\r\n    // default(value):Any\r\n    default: function(o, value) {\r\n        return value;\r\n    }\r\n\r\n});\r\n"]}