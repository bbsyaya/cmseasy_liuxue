{"version":3,"sources":["components/browser.js"],"names":["dmx","Component","initialData","online","navigator","onLine","doNotTrack","userAgent","language","cookieEnabled","location","window","viewport","width","height","device","pixelRatio","orientation","document","hidden","visibility","visibilityState","methods","goto","alert","message","render","node","BaseComponent","prototype","call","this","addEventListener","update","bind","set","msDoNotTrack","innerWidth","innerHeight","screen","devicePixelRatio","deviceXDPI","logicalXDPI","getOrientation","Math","max","body","scrollWidth","documentElement","scrollHeight","matchMedia","matches"],"mappings":";;;;;;AAAAA,IAAAC,UAAA,WAEAC,aACAC,OAAAC,UAAAC,OACAC,YAAA,EACAC,UAAAH,UAAAG,UACAC,SAAAJ,UAAAI,SACAC,cAAAL,UAAAK,cAEAC,SAAAC,OAAAD,SAEAE,UACAC,MAAA,EACAC,OAAA,GAGAC,QACAF,MAAA,EACAC,OAAA,EACAE,WAAA,EACAC,YAAA,aAGAC,UACAL,MAAA,EACAC,OAAA,EACAK,OAAAD,SAAAC,OACAC,WAAAF,SAAAG,kBAIAC,SACAC,KAAA,SAAAb,GACAC,OAAAD,SAAAA,GAGAc,MAAA,SAAAC,GACAd,OAAAa,MAAAC,KAIAC,OAAA,SAAAC,GACA3B,IAAA4B,cAAAC,UAAAH,OAAAI,KAAAC,KAAAJ,GAEAhB,OAAAqB,iBAAA,SAAAD,KAAAE,OAAAC,KAAAH,OACApB,OAAAqB,iBAAA,SAAAD,KAAAE,OAAAC,KAAAH,OACApB,OAAAqB,iBAAA,UAAAD,KAAAE,OAAAC,KAAAH,OACApB,OAAAqB,iBAAA,mBAAAD,KAAAE,OAAAC,KAAAH,OACApB,OAAAM,aAAAN,OAAAqB,iBAAA,oBAAAD,KAAAE,OAAAC,KAAAH,OAEAA,KAAAE,UAGAA,OAAA,WACAF,KAAAI,IAAA,SAAA/B,UAAAC,QACA0B,KAAAI,IAAA,aAAA,KAAA/B,UAAAE,YAAA,KAAAK,OAAAL,YAAA,KAAAF,UAAAgC,cACAL,KAAAI,IAAA,YAAA/B,UAAAG,WACAwB,KAAAI,IAAA,WAAA/B,UAAAI,UACAuB,KAAAI,IAAA,gBAAA/B,UAAAK,eAEAsB,KAAAI,IAAA,WAAAxB,OAAAD,UAEAqB,KAAAI,IAAA,YACAtB,MAAAF,OAAA0B,WACAvB,OAAAH,OAAA2B,cAGAP,KAAAI,IAAA,UACAtB,MAAAF,OAAA4B,OAAA1B,MACAC,OAAAH,OAAA4B,OAAAzB,OACAE,WAAAL,OAAA6B,kBAAA7B,OAAA4B,OAAAE,WAAA9B,OAAA4B,OAAAG,YACAzB,YAAAc,KAAAY,mBAGAZ,KAAAI,IAAA,YACAtB,MAAA+B,KAAAC,IAAA3B,SAAA4B,KAAAC,YAAA7B,SAAA8B,gBAAAD,aACAjC,OAAA8B,KAAAC,IAAA3B,SAAA4B,KAAAG,aAAA/B,SAAA8B,gBAAAC,cACA9B,OAAAD,SAAAC,OACAC,WAAAF,SAAAG,mBAIAsB,eAAA,WACA,MAAAhC,QAAAuC,WAAA,2BAAAC,QACA,WAEA","file":"../dmxBrowser/dmxBrowser.js","sourcesContent":["dmx.Component('browser', {\r\n\r\n    initialData: {\r\n        online: navigator.onLine,\r\n        doNotTrack: false,\r\n        userAgent: navigator.userAgent,\r\n        language: navigator.language,\r\n        cookieEnabled: navigator.cookieEnabled,\r\n\r\n        location: window.location,\r\n\r\n        viewport: {\r\n            width: 0,\r\n            height: 0\r\n        },\r\n\r\n        device: {\r\n            width: 0,\r\n            height: 0,\r\n            pixelRatio: 1,\r\n            orientation: 'landscape'\r\n        },\r\n\r\n        document: {\r\n            width: 0,\r\n            height: 0,\r\n            hidden: document.hidden,\r\n            visibility: document.visibilityState\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        goto: function(location) {\r\n            window.location = location;\r\n        },\r\n\r\n        alert: function(message) {\r\n            window.alert(message);\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        dmx.BaseComponent.prototype.render.call(this, node);\r\n\r\n        window.addEventListener('resize', this.update.bind(this));\r\n        window.addEventListener('online', this.update.bind(this));\r\n        window.addEventListener('offline', this.update.bind(this));\r\n        window.addEventListener('visibilitychange', this.update.bind(this));\r\n        if (window.orientation) window.addEventListener('orientationchange', this.update.bind(this));\r\n\r\n        this.update();\r\n    },\r\n\r\n    update: function() {\r\n        this.set('online', navigator.onLine);\r\n        this.set('doNotTrack', navigator.doNotTrack == '1' || window.doNotTrack == '1' || navigator.msDoNotTrack == '1');\r\n        this.set('userAgent', navigator.userAgent);\r\n        this.set('language', navigator.language);\r\n        this.set('cookieEnabled', navigator.cookieEnabled);\r\n\r\n        this.set('location', window.location);\r\n\r\n        this.set('viewport', {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        });\r\n\r\n        this.set('device', {\r\n            width: window.screen.width,\r\n            height: window.screen.height,\r\n            pixelRatio: window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI,\r\n            orientation: this.getOrientation()\r\n        });\r\n\r\n        this.set('document', {\r\n            width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),\r\n            height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight),\r\n            hidden: document.hidden,\r\n            visibility: document.visibilityState\r\n        });\r\n    },\r\n\r\n    getOrientation: function() {\r\n        if (window.matchMedia(\"(orientation: portrait)\").matches) {\r\n            return 'portrait';\r\n        } else {\r\n            return 'landscape';\r\n        }\r\n    }\r\n\r\n});\r\n"]}